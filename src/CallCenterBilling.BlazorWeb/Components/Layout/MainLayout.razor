@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        @* <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" /> *@
        @* <MudText Typo="Typo.h5" Class="ml-3">Call Center Billing</MudText> *@
        <MudImage Src=@Assets["images/logo.png"] Height="40" Alt="CallBi"/>
        <MudSpacer />

        @* Authentication Section *@
        <CascadingAuthenticationState>
            <AuthorizeView>
                <Authorized>
                    <MudText Typo="Typo.body2" Class="mr-3">
                        Hello, @context.User.Identity?.Name!
                    </MudText>
                    <MudMenu Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" Direction="Direction.Bottom" OffsetY="true">
                        <MudMenuItem OnClick="@(() => Navigation.NavigateTo("/Account/Profile"))">
                            <div style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-2" />
                                Profile
                            </div>
                        </MudMenuItem>
                        <MudDivider />
                        <MudMenuItem>
                            <form action="/Account/Logout" method="post" style="margin: 0;">
                                <AntiforgeryToken />
                                <button type="submit" style="background: none; border: none; width: 100%; text-align: left; display: flex; align-items: center; padding: 0; color: inherit; cursor: pointer;">
                                    <MudIcon Icon="@Icons.Material.Filled.Logout" Class="mr-2" />
                                    Logout
                                </button>
                            </form>
                        </MudMenuItem>
                    </MudMenu>
                </Authorized>
                <NotAuthorized>
                    <MudButton Variant="Variant.Text" Color="Color.Inherit" Href="/Account/Login" StartIcon="@Icons.Material.Filled.Login">
                        Login
                    </MudButton>
                </NotAuthorized>
            </AuthorizeView>
        </CascadingAuthenticationState>

        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
    </MudAppBar>

    
    <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="0" Variant="@DrawerVariant.Mini" OpenMiniOnHover="true">
        <NavMenu />
    </MudDrawer>

    <MudMainContent Class="pt-16 pa-4">
        <CascadingAuthenticationState>
            @Body
        </CascadingAuthenticationState>
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _theme = new()
            {
                PaletteLight = _lightPalette,
                PaletteDark = _darkPalette,
                LayoutProperties = new LayoutProperties()
            };
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private void LogoutAsync()
    {
        // Simple navigation with force reload to handle logout
        Navigation.NavigateTo("/Account/Logout", forceLoad: true);
    }

    private readonly PaletteLight _lightPalette = new()
        {
            Black = "#110e2d",
            AppbarText = "#424242",
            AppbarBackground = "rgba(255,255,255,0.8)",
            DrawerBackground = "#ffffff",
            GrayLight = "#e8e8e8",
            GrayLighter = "#f9f9f9",
        };

    private readonly PaletteDark _darkPalette = new()
        {
            Primary = "#7e6fff",
            Surface = "#1e1e2d",
            Background = "#1a1a27",
            BackgroundGray = "#151521",
            AppbarText = "#92929f",
            AppbarBackground = "rgba(26,26,39,0.8)",
            DrawerBackground = "#1a1a27",
            ActionDefault = "#74718e",
            ActionDisabled = "#9999994d",
            ActionDisabledBackground = "#605f6d4d",
            TextPrimary = "#b2b0bf",
            TextSecondary = "#92929f",
            TextDisabled = "#ffffff33",
            DrawerIcon = "#92929f",
            DrawerText = "#92929f",
            GrayLight = "#2a2833",
            GrayLighter = "#1e1e2d",
            Info = "#4a86ff",
            Success = "#3dcb6c",
            Warning = "#ffb545",
            Error = "#ff3f5f",
            LinesDefault = "#33323e",
            TableLines = "#33323e",
            Divider = "#292838",
            OverlayLight = "#1e1e2d80",
        };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };
}